buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
    }
}

group   = projectGroup
version = projectVersion

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

description = 'Video-analytic'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    
    ivy {
        url 'http://repo.i.zozowfm.com/artifactory/libs-release-candidates-local/'
        credentials {
            username abcRepoUsername
            password abcRepoPassword
        }

        layout 'maven'
    }

    maven {
        url 'http://repo.i.zozowfm.com/artifactory/libs-release/'
        credentials {
            username abcRepoUsername
            password abcRepoPassword
        }
    }
 }

ext {
    lombokVersion = '1.18.6'
    jsonSimpleVersion = '1.1.1'
    commonCsvVersion = '1.5'
    h2Version = '1.0.60'
    liquibaseVersion = '3.6.3'
    licenseCheckerVersion = '0.1.16'
    license3jVersion = '2.0.0-JVM8'
    springBootAopVersion = '2.1.3.RELEASE'
    hateoasVersion = '0.25.1.RELEASE'
    servletApiVersion = '3.1.0'
    springBootCacheVersion = '2.1.5.RELEASE'
    guavaVersion = '27.1-jre'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-websocket")

    compile("com.googlecode.json-simple:json-simple:$jsonSimpleVersion")

    compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("mysql:mysql-connector-java")
    compile("org.postgresql:postgresql")
    
    //license checker dependency
    compile ("ru.abcconsulting:license-checker:$licenseCheckerVersion")

    compile group: 'com.verhas', name: 'license3j', version: license3jVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootAopVersion
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas',    version: hateoasVersion
    compile group: 'javax.servlet',               name: 'javax.servlet-api', version: servletApiVersion


    compile group: 'com.h2database', name: 'h2', version: h2Version
    compile group: 'org.liquibase', name: 'liquibase-core', version: liquibaseVersion

    compile("org.springframework.boot:spring-boot-starter-security")

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: springBootCacheVersion
    compile group: 'com.google.guava', name: 'guava', version: guavaVersion

    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.15'

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.apache.commons:commons-csv:$commonCsvVersion")

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// versioning
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task getVersion << {
    println projectVersion
}

/*
 * "Need to pass parameter 'buildNumber', use: setVersion -PbuildNumber=<value>"
 */
task calculateVersion << {
    println projectVersion.replace('-SNAPSHOT', ".$buildNumber")
}

/*
 * "Need to pass parameter 'buildVersion', use: setVersion -PbuildVersion=<value>"
 */
task setVersion << {
    ant.propertyfile(file: 'gradle.properties') {
        entry (key: 'projectVersion', value: buildVersion)
    }

    println buildVersion
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// zip configuration files
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task zipConfigurationFiles(type: Zip) {
    from 'src/main/resources/'
    include '*'
    include '**/*'       //to include subdirectories
    include '**/*.*'     //to include files
//    exclude 'presets/**' //to exclude front properties presets
    archiveName "configuration-${projectVersion}.zip"
    destinationDir(file('build/'))
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// zip python
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task zipPython(type: Zip) {
    from 'python'
    exclude '**/*.h5'   // exclude model
    include '*'
    include '**/*'      //to include subdirectories
    include '**/**/*'   //to include subdirectories
    include '**/*.*'    //to include files
    archiveName "python-scripts-${projectVersion}.zip"
    destinationDir(file('build/'))
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// zip model
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task zipModel(type: Zip) {
    from 'python'
    include '**/*.h5'   // exclude model
    archiveName "model-${projectVersion}.zip"
    destinationDir(file('build/'))
}
