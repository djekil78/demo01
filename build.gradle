buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
    }
}

//apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


description = 'biometry-integration'

bootJar {
    baseName = 'biometry-integration'
    version = '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    sourcesGenerationDir = "src/main/generated"
///////////////////////////////////////////////
// versions of dependencies
///////////////////////////////////////////////
    springBootVersion = '2.1.2.RELEASE'
    jsonSimpleVersion = '1.1.1'
    liquibaseVersion = '3.6.2'
    hibernateEntityManagerVersion = '5.1.17.Final'
    hibernateJpaVersion = '1.0.2.Final'
    querydslVersion = '4.1.4'
}

idea {
    module {
        sourceDirs += file(sourcesGenerationDir)
    }
}


dependencies {
    /*implementation files("$projectDir/src/main/generated") {
        builtBy 'compile'
    }*/
    compile("mysql:mysql-connector-java")
    compile("org.postgresql:postgresql")
    compile("org.projectlombok:lombok")
    annotationProcessor "org.projectlombok:lombok"
    compile group: 'org.liquibase', name: 'liquibase-core', version: liquibaseVersion

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion

    compile "com.querydsl:querydsl-jpa:${querydslVersion}"
    compile "com.querydsl:querydsl-apt:${querydslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jpa"
    annotationProcessor("javax.persistence:javax.persistence-api")

    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: jsonSimpleVersion

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

compileJava {
    options.compilerArgs << "-s"
    options.compilerArgs << "$projectDir/src/main/generated"

    doFirst {
        // make sure that directory exists
        file(new File(projectDir, "/src/main/generated")).mkdirs()
    }
}

clean.doLast {
    // clean-up directory when necessary
    file(new File(projectDir, "/src/main/generated")).deleteDir()
}

/*sourceSets {
    generated {
        java {
            srcDir "$buildDir/generated"
        }
    }
}*/

/*sourceSets {
    generated {
        java {
            srcDirs = ['src/main/querydsl']
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/main/querydsl')
    }
}*/
